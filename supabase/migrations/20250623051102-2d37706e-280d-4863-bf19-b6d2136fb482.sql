
-- Add username field to chat_users table
ALTER TABLE public.chat_users 
ADD COLUMN username text UNIQUE;

-- Create index for username searches
CREATE INDEX idx_chat_users_username ON public.chat_users(username);

-- Add constraint to ensure username is lowercase and alphanumeric
ALTER TABLE public.chat_users 
ADD CONSTRAINT username_format_check 
CHECK (username ~ '^[a-z0-9_]{3,20}$');

-- Create private_conversations table for one-on-one chats
CREATE TABLE public.private_conversations (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user1_id integer NOT NULL REFERENCES public.chat_users(id) ON DELETE CASCADE,
  user2_id integer NOT NULL REFERENCES public.chat_users(id) ON DELETE CASCADE,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_message_at timestamp with time zone DEFAULT now(),
  
  -- Ensure user1_id is always smaller than user2_id for consistency
  CONSTRAINT user_order_check CHECK (user1_id < user2_id),
  
  -- Ensure unique conversation between two users
  CONSTRAINT unique_conversation UNIQUE (user1_id, user2_id)
);

-- Create private_messages table for one-on-one messages
CREATE TABLE public.private_messages (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  conversation_id integer NOT NULL REFERENCES public.private_conversations(id) ON DELETE CASCADE,
  sender_id integer NOT NULL REFERENCES public.chat_users(id) ON DELETE CASCADE,
  message text NOT NULL,
  message_type text DEFAULT 'text',
  media_url text,
  media_content text,
  is_read boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  reply_to_message_id integer REFERENCES public.private_messages(id),
  forwarded_from_message_id integer REFERENCES public.private_messages(id)
);

-- Create indexes for better performance
CREATE INDEX idx_private_conversations_users ON public.private_conversations(user1_id, user2_id);
CREATE INDEX idx_private_messages_conversation ON public.private_messages(conversation_id, created_at);
CREATE INDEX idx_private_messages_sender ON public.private_messages(sender_id);

-- Function to get or create private conversation
CREATE OR REPLACE FUNCTION public.get_or_create_private_conversation(
  p_user1_id integer,
  p_user2_id integer
) RETURNS integer
LANGUAGE plpgsql
AS $$
DECLARE
  conversation_id integer;
  smaller_id integer;
  larger_id integer;
BEGIN
  -- Ensure consistent ordering
  IF p_user1_id < p_user2_id THEN
    smaller_id := p_user1_id;
    larger_id := p_user2_id;
  ELSE
    smaller_id := p_user2_id;
    larger_id := p_user1_id;
  END IF;
  
  -- Try to find existing conversation
  SELECT id INTO conversation_id
  FROM public.private_conversations
  WHERE user1_id = smaller_id AND user2_id = larger_id;
  
  -- If not found, create new conversation
  IF conversation_id IS NULL THEN
    INSERT INTO public.private_conversations (user1_id, user2_id)
    VALUES (smaller_id, larger_id)
    RETURNING id INTO conversation_id;
  END IF;
  
  RETURN conversation_id;
END;
$$;

-- Function to update conversation timestamp on new message
CREATE OR REPLACE FUNCTION public.update_private_conversation_timestamp()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  UPDATE public.private_conversations
  SET last_message_at = NEW.created_at,
      updated_at = NEW.created_at
  WHERE id = NEW.conversation_id;
  
  RETURN NEW;
END;
$$;

-- Create trigger to update conversation timestamp
CREATE TRIGGER update_private_conversation_timestamp_trigger
  AFTER INSERT ON public.private_messages
  FOR EACH ROW
  EXECUTE FUNCTION public.update_private_conversation_timestamp();

-- Function to search users by username or name
CREATE OR REPLACE FUNCTION public.search_users(search_term text)
RETURNS TABLE(
  id integer,
  name text,
  username text,
  phone text,
  is_approved boolean
)
LANGUAGE sql
STABLE
AS $$
  SELECT u.id, u.name, u.username, u.phone, u.is_approved
  FROM public.chat_users u
  WHERE u.is_approved = true
    AND (
      u.username ILIKE '%' || search_term || '%'
      OR u.name ILIKE '%' || search_term || '%'
    )
  ORDER BY 
    CASE WHEN u.username = search_term THEN 1 ELSE 2 END,
    u.name;
$$;
